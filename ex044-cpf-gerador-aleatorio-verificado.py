'''
Aqui est√° o passo a passo **detalhado** para voc√™ transformar o texto em um programa funcional de gera√ß√£o de CPF
em Python. As instru√ß√µes seguem uma ordem l√≥gica para que voc√™ implemente o programa por partes, explorando os conceitos mencionados.
### **Instru√ß√µes para criar o programa de Gerador de CPF**
1. **Importar bibliotecas necess√°rias**
    - Use o `random` para gerar n√∫meros aleat√≥rios.
    - A biblioteca `os` pode ser usada, caso queira implementar funcionalidades adicionais (como limpar o terminal).
``` python
import random
```
1. **Gera√ß√£o dos 9 primeiros d√≠gitos aleat√≥rios**
    - Crie uma fun√ß√£o chamada `gerar_cpf()`.
    - Nessa fun√ß√£o, use `random.randint(0, 9)` para gerar 9 n√∫meros aleat√≥rios e armazen√°-los em uma lista.
    - Use uma **list comprehension** ou um `for` para preencher os 9 primeiros d√≠gitos.
``` python
nove_digitos = [random.randint(0, 9) for _ in range(9)]
```
1. **C√°lculo do primeiro d√≠gito verificador (m√≥dulo 11)**
    - Calcule o **1¬∫ d√≠gito verificador** com a f√≥rmula de m√≥dulo 11:
        - Multiplique cada um dos 9 d√≠gitos pelos pesos (de 10 a 2, em ordem decrescente).
        - Some os resultados.
        - Multiplique o resultado por 10 e calcule o resto da divis√£o por 11.
        - Se o resto for maior que 9, o d√≠gito ser√° zero (`0`).

    - Adicione o **1¬∫ d√≠gito verificador** √† lista dos n√∫meros gerados anteriormente.
``` python
soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(10, 1, -1)))
primeiro_digito = (soma * 10 % 11) % 10
nove_digitos.append(primeiro_digito)
```
1. **C√°lculo do segundo d√≠gito verificador (m√≥dulo 11)**
    - Inclua o **primeiro d√≠gito verificador** no c√°lculo do **segundo d√≠gito**:
        - Reutilize a f√≥rmula do m√≥dulo 11, mas agora use os **10 primeiros n√∫meros** (incluindo o
        1¬∫ d√≠gito verificador) e os pesos de 11 a 2.

    - Adicione o **2¬∫ d√≠gito verificador** √† lista.
``` python
soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(11, 1, -1)))
segundo_digito = (soma * 10 % 11) % 10
nove_digitos.append(segundo_digito)
```
1. **Formata√ß√£o do CPF no padr√£o `XXX.XXX.XXX-XX`**
    - Utilize `str.format` para exibir o CPF final no formato correto.
    - Separe os 9 n√∫meros em blocos de tr√™s e adicione os d√≠gitos verificadores no final.
``` python
cpf_formatado = "{}{}{}.{}{}{}.{}{}{}-{}{}".format(*nove_digitos)
```
1. **Cria√ß√£o de uma interface simples no terminal**
    - Crie uma fun√ß√£o `main()` para exibir um menu com duas op√ß√µes:
        - Gerar CPF.
        - Sair do programa.

    - Use um **loop-while** para que o usu√°rio possa gerar CPFs repetidamente.
    - Adicione verifica√ß√£o de entrada (para aceitar apenas as op√ß√µes `1` e `2`).
``` python
def main():
    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1 - Gerar CPF")
        print("2 - Sair")
        opcao = input("Digite sua escolha: ").strip()
        if opcao == "1":
            print(f"üÜï CPF Gerado: {gerar_cpf()}")
        elif opcao == "2":
            print("Encerrando o programa. At√© logo!")
            break
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")
```
1. **Montagem do programa final**
    - Agora, combine as fun√ß√µes para criar o programa completo.
    - Ele deve come√ßar executando a fun√ß√£o `main()`.
``` python
if __name__ == "__main__":
    main()
```
### Programa completo final (seguindo as instru√ß√µes acima)
``` python
import random


def gerar_cpf():
    nove_digitos = [random.randint(0, 9) for _ in range(9)]

    # Primeiro d√≠gito verificador
    soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(10, 1, -1)))
    primeiro_digito = (soma * 10 % 11) % 10
    nove_digitos.append(primeiro_digito)

    # Segundo d√≠gito verificador
    soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(11, 1, -1)))
    segundo_digito = (soma * 10 % 11) % 10
    nove_digitos.append(segundo_digito)

    # Formata√ß√£o do CPF
    return "{}{}{}.{}{}{}.{}{}{}-{}{}".format(*nove_digitos)


def main():
    print("üî¢ Bem-vindo ao Gerador de CPF üî¢")
    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1 - Gerar CPF")
        print("2 - Sair")
        opcao = input("Digite sua escolha: ").strip()

        if opcao == "1":
            print(f"üÜï CPF Gerado: {gerar_cpf()}")
        elif opcao == "2":
            print("Encerrando o programa. At√© logo!")
            break
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")


if __name__ == "__main__":
    main()
```
Com essas instru√ß√µes, voc√™ pode facilmente criar o programa, explorando as partes principais como o c√°lculo dos
d√≠gitos verificadores e a interface no terminal. √â simples de entender, mas utiliza conceitos importantes como:
- Manipula√ß√£o de listas.
- Estruturas de repeti√ß√£o e entrada do usu√°rio.
- Regras de valida√ß√£o real (m√≥dulo 11).

'''





#---------------------------------------------------Gerador de cpf------------------------------------------------------

import random

def gerar_cpf():
    """
    Gera um CPF v√°lido formatado no padr√£o XXX.XXX.XXX-XX.
    """
    # Gerar os 9 primeiros d√≠gitos aleat√≥rios
    nove_digitos = [random.randint(0, 9) for _ in range(9)]

    # Calcular o primeiro d√≠gito verificador
    soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(10, 1, -1)))
    primeiro_digito = (soma * 10 % 11) % 10

    # Adicionar o primeiro d√≠gito verificador no final
    nove_digitos.append(primeiro_digito)

    # Calcular o segundo d√≠gito verificador
    soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(11, 1, -1)))
    segundo_digito = (soma * 10 % 11) % 10

    # Adicionar o segundo d√≠gito ao CPF
    nove_digitos.append(segundo_digito)

    # Formatar o CPF no padr√£o XXX.XXX.XXX-XX
    cpf_formatado = "{}{}{}.{}{}{}.{}{}{}-{}{}".format(*nove_digitos)

    return cpf_formatado


def main():
    """
    Interface simples no terminal para gerar CPF ou sair do programa.
    """
    print("üî¢ Bem-vindo ao Gerador de CPF em Python! üî¢")

    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1 - Gerar CPF")
        print("2 - Sair")
        opcao = input("Digite sua escolha: ").strip()

        if opcao == "1":
            cpf = gerar_cpf()
            print(f"üÜï CPF Gerado: {cpf}")
        elif opcao == "2":
            print("Encerrando o programa. At√© logo! üëã")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Por favor, digite 1 ou 2.")


if __name__ == "__main__":
    main()

    print("  _____ ")
    print(" /     \\")
    print("| () () |")
    print(" \\  ^  /")
    print("  ||||| ")
    print("  ||||| ")
    print("   ||   ")
    print("  /||\\  ")
    print(" / || \\ ")
    print("/  ||  \\")
    print("   ||   ")
    print("  /  \\  ")
    print(" /    \\ ")
    print("/      \\")
    print("Goodbye! üëã")
    

#---------------------------------------------------vers√£o reduzida ----------------------------------------------------
'''
import random


def gerar_cpf():
    nove_digitos = [random.randint(0, 9) for _ in range(9)]
    for _ in range(2):
        soma = sum(valor * peso for valor, peso in zip(nove_digitos, range(len(nove_digitos) + 1, 1, -1)))
        nove_digitos.append((soma * 10 % 11) % 10)
    return "{}{}{}.{}{}{}.{}{}{}-{}{}".format(*nove_digitos)


print(f"CPF Gerado: {gerar_cpf()}")
'''

#-----------------------------------------------------------------------------------------------------------------------